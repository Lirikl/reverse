// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: mafia.proto

package mafia

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MafiaClient is the client API for Mafia service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MafiaClient interface {
	Do(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (Mafia_ConnectClient, error)
	GameSession(ctx context.Context, opts ...grpc.CallOption) (Mafia_GameSessionClient, error)
}

type mafiaClient struct {
	cc grpc.ClientConnInterface
}

func NewMafiaClient(cc grpc.ClientConnInterface) MafiaClient {
	return &mafiaClient{cc}
}

func (c *mafiaClient) Do(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/mafia.Mafia/Do", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mafiaClient) Connect(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (Mafia_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[0], "/mafia.Mafia/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Mafia_ConnectClient interface {
	Recv() (*ConnectionUpdate, error)
	grpc.ClientStream
}

type mafiaConnectClient struct {
	grpc.ClientStream
}

func (x *mafiaConnectClient) Recv() (*ConnectionUpdate, error) {
	m := new(ConnectionUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mafiaClient) GameSession(ctx context.Context, opts ...grpc.CallOption) (Mafia_GameSessionClient, error) {
	stream, err := c.cc.NewStream(ctx, &Mafia_ServiceDesc.Streams[1], "/mafia.Mafia/GameSession", opts...)
	if err != nil {
		return nil, err
	}
	x := &mafiaGameSessionClient{stream}
	return x, nil
}

type Mafia_GameSessionClient interface {
	Send(*GameCommand) error
	Recv() (*GameEvent, error)
	grpc.ClientStream
}

type mafiaGameSessionClient struct {
	grpc.ClientStream
}

func (x *mafiaGameSessionClient) Send(m *GameCommand) error {
	return x.ClientStream.SendMsg(m)
}

func (x *mafiaGameSessionClient) Recv() (*GameEvent, error) {
	m := new(GameEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MafiaServer is the server API for Mafia service.
// All implementations must embed UnimplementedMafiaServer
// for forward compatibility
type MafiaServer interface {
	Do(context.Context, *Request) (*Response, error)
	Connect(*ConnectionRequest, Mafia_ConnectServer) error
	GameSession(Mafia_GameSessionServer) error
	mustEmbedUnimplementedMafiaServer()
}

// UnimplementedMafiaServer must be embedded to have forward compatible implementations.
type UnimplementedMafiaServer struct {
}

func (UnimplementedMafiaServer) Do(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Do not implemented")
}
func (UnimplementedMafiaServer) Connect(*ConnectionRequest, Mafia_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedMafiaServer) GameSession(Mafia_GameSessionServer) error {
	return status.Errorf(codes.Unimplemented, "method GameSession not implemented")
}
func (UnimplementedMafiaServer) mustEmbedUnimplementedMafiaServer() {}

// UnsafeMafiaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MafiaServer will
// result in compilation errors.
type UnsafeMafiaServer interface {
	mustEmbedUnimplementedMafiaServer()
}

func RegisterMafiaServer(s grpc.ServiceRegistrar, srv MafiaServer) {
	s.RegisterService(&Mafia_ServiceDesc, srv)
}

func _Mafia_Do_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MafiaServer).Do(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mafia.Mafia/Do",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MafiaServer).Do(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mafia_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectionRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MafiaServer).Connect(m, &mafiaConnectServer{stream})
}

type Mafia_ConnectServer interface {
	Send(*ConnectionUpdate) error
	grpc.ServerStream
}

type mafiaConnectServer struct {
	grpc.ServerStream
}

func (x *mafiaConnectServer) Send(m *ConnectionUpdate) error {
	return x.ServerStream.SendMsg(m)
}

func _Mafia_GameSession_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MafiaServer).GameSession(&mafiaGameSessionServer{stream})
}

type Mafia_GameSessionServer interface {
	Send(*GameEvent) error
	Recv() (*GameCommand, error)
	grpc.ServerStream
}

type mafiaGameSessionServer struct {
	grpc.ServerStream
}

func (x *mafiaGameSessionServer) Send(m *GameEvent) error {
	return x.ServerStream.SendMsg(m)
}

func (x *mafiaGameSessionServer) Recv() (*GameCommand, error) {
	m := new(GameCommand)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Mafia_ServiceDesc is the grpc.ServiceDesc for Mafia service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mafia_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mafia.Mafia",
	HandlerType: (*MafiaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Do",
			Handler:    _Mafia_Do_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Mafia_Connect_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "GameSession",
			Handler:       _Mafia_GameSession_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mafia.proto",
}
